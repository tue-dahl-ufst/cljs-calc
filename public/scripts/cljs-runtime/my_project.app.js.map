{"version":3,"sources":["my_project/app.cljs"],"mappings":"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","names":["my-project.app/screen","reagent.core.atom","my-project.app/memory","my-project.app/opt","my-project.app/new-number?","my-project.app/precision","my-project.app/reset","cljs.core/reset!","my-project.app/evaluate","G__26720","cljs.core/deref","G__26721","fexpr__26719","my-project.app/opt-run","opt-arg","cljs.core._EQ_","G__26723","G__26724","fexpr__26722","my-project.app/number-btn","d","cljs.core.swap_BANG_","x","Math/pow","cljs.core/inc","my-project.app/operator-btn","opt-symbol","my-project.app/calc-app","x__4214__auto__","y__4215__auto__","iter__4529__auto__","s__26726","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__26728","cljs.core/chunk-buffer","i__26727","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26725","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","cljs.core//","s__26730","b__26732","i__26731","iter__26729","cljs.core/-","s__26734","b__26736","i__26735","iter__26733","cljs.core/+","cljs.core/*","my-project.app/run","reagent.dom.render","js/document.getElementById","my-project.app/reload","js/console","my-project.app/add","a","b","my-project.app/foo","y","cljs.core/List","cljs.core/chunk-first"],"sourcesContent":["(ns my-project.app\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]))\n\n(def screen (r/atom 0))\n(def memory (r/atom nil))\n(def opt (r/atom nil))\n(def new-number? (r/atom true))\n(def precision (r/atom 0))\n\n(defn reset []\n  (reset! memory nil)\n  (reset! screen 0)\n  (reset! opt nil)\n  (reset! new-number? true)\n  (reset! precision 0))\n\n(defn evaluate []\n  (reset! screen (@opt @memory @screen))\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! new-number? true))\n\n(defn opt-run [opt-arg]\n  (if (= @opt nil)\n    (do (reset! memory @screen)\n        (reset! opt opt-arg)\n        (reset! new-number? true))\n    (do (reset! screen (@opt @memory @screen))\n        (reset! memory @screen)\n        (reset! opt opt-arg)\n        (reset! new-number? true))))\n\n(defn number-btn [d]\n  [:td [:input \n        {:type \"button\" :value d :on-click\n         #(if @new-number?\n            (do (reset! screen d)\n                (reset! precision 0)\n                (reset! new-number? false))\n            (if (> @precision 0)\n              (do (swap! screen (fn [x] (+ x (/ d (Math/pow 10 @precision)))))\n                  (swap! precision inc))\n              (swap! screen (fn [x] (+ (* 10 x) d)))))}]])\n\n(defn operator-btn [opt-arg opt-symbol]\n  [:td [:input\n        {:type \"button\" :value opt-symbol :on-click #(opt-run opt-arg)}]])\n\n(defn calc-app []\n  [:table {:border \"1\"}\n   [:tbody\n    [:tr\n     [:td {:colspan \"3\"} [:input#result {:readonly \"\" :type \"text\" \n                                         :value (.toFixed @screen (max 0 (dec @precision)))}]]\n     [:td [:input {:type \"button\" :value \"c\" :on-click reset}]]]\n    [:tr\n     (for [d (range 1 4)] (number-btn d))\n     (operator-btn / \"/\")]\n    [:tr\n     (for [d (range 4 7)] (number-btn d))\n     (operator-btn - \"-\")]\n    [:tr\n     (for [d (range 7 10)] (number-btn d))\n     (operator-btn + \"+\")]\n    [:tr\n     [:td [:input {:type \"button\" :value \".\" \n                   :on-click #(swap! precision (fn [x] (if (> x 0) x 1)))}]]\n     (number-btn 0)\n     [:td [:input {:type \"button\" :value \"=\" :on-click evaluate}]]\n     (operator-btn * \"*\")]]]\n  )\n\n(defn ^:export run []\n      (rdom/render [calc-app] (js/document.getElementById \"app\")))\n\n(defn ^:export reload []\n      (.log js/console \"reload...\")\n      (run))\n\n(defn add [a b]\n      (+ a b))\n\n(defn foo [x y]\n      (list y x))\n"]}