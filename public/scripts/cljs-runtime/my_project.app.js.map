{"version":3,"sources":["my_project/app.cljs"],"mappings":"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","names":["my-project.app/screen","reagent.core.atom","my-project.app/memory","my-project.app/opt","my-project.app/precision","my-project.app/memory-precision","my-project.app/memories","my-project.app/new-number?","my-project.app/clear","cljs.core/reset!","my-project.app/evaluate","G__29482","cljs.core/deref","G__29483","fexpr__29481","x__4214__auto__","y__4215__auto__","my-project.app/operator-handler","opt-arg","cljs.core/not","cljs.core._EQ_","G__29485","G__29486","fexpr__29484","cljs.core.swap_BANG_","cljs.core.partial","cljs.core/max","my-project.app/number-handler","d","x","Math/pow","cljs.core/inc","my-project.app/memory-handler","key","fexpr__29488","p1__29487#","cljs.core.assoc","fexpr__29489","my-project.app/operator-btn","opt-symbol","my-project.app/number-btn","my-project.app/calc-app","iter__4529__auto__","s__29491","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29493","cljs.core/chunk-buffer","i__29492","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29490","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","cljs.core//","s__29495","b__29497","i__29496","iter__29494","cljs.core/-","s__29499","b__29501","i__29500","iter__29498","cljs.core/+","cljs.core/*","my-project.app/run","reagent.dom.render","js/document.getElementById","my-project.app/reload","js/console","cljs.core/chunk-first"],"sourcesContent":["(ns my-project.app\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]))\n\n(def screen (r/atom 0))\n(def memory (r/atom nil))\n(def opt (r/atom nil))\n(def precision (r/atom 0))\n(def memory-precision (r/atom 0))\n(def memories (r/atom {}))\n(def new-number? (r/atom true))\n\n(defn clear []\n  (reset! screen 0)\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! precision 0)\n  (reset! memory-precision 0)\n  (reset! new-number? true))\n\n(defn evaluate []\n  (reset! screen (@opt @memory @screen))\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! precision (max @precision @memory-precision))\n  (reset! memory-precision 0)\n  (reset! new-number? true))\n\n(defn operator-handler [opt-arg]\n  \"Returns a function that handles input operator $opt-arg.\"\n  (fn []\n    (when (not @new-number?) ;; does nothing if we expect new number\n      (when (not (= @opt nil)) ;; if there is a pending operation, do it\n        (reset! screen (@opt @memory @screen))\n        (swap! precision (partial max @memory-precision))\n        (reset! memory nil)\n        (reset! memory-precision 0))\n      (reset! opt opt-arg) ;; no matter what record new operation\n      (reset! new-number? true)))) ;; expect a number after this\n(defn number-handler [d]\n  \"Returns a function that handles input number $d.\"\n  (fn []\n    (if @new-number? ;; either we expect a new number\n      (do (reset! memory @screen)\n          (reset! memory-precision @precision)\n          (reset! screen d)\n          (reset! precision 0)\n          (reset! new-number? false))\n      (if (> @precision 0) ;; or we build on what is already there\n        (do (swap! screen (fn [x] (+ x (/ d (Math/pow 10 @precision)))))\n            (swap! precision inc))\n        (swap! screen (fn [x] (+ (* 10 x) d)))))))\n(defn memory-handler [key]\n  \"Returns a function that handles saving and recalling from register $key.\"\n  (fn []\n    (if (= (@memories key) nil)\n      (swap! memories #(assoc % key @screen))\n      (reset! screen (@memories key)))))\n\n(defn operator-btn [opt-arg opt-symbol]\n  [:td [:input\n        {:type \"button\" :value opt-symbol :on-click (operator-handler opt-arg)}]])\n(defn number-btn [d]\n  [:td [:input \n        {:type \"button\" :value d :on-click (number-handler d)}]])\n\n(defn calc-app []\n  [:html\n   [:table {:border \"1\"}\n     [:tbody\n      [:tr\n       [:td {:colspan \"3\"} [:input#result {:readonly \"\" :type \"text\"\n                                           :value (.toFixed @screen (max 0 (dec @precision)))}]]\n       [:td [:input {:type \"button\" :value \"c\" :on-click clear}]]]\n      [:tr\n       (for [d (range 1 4)] (number-btn d))\n       (operator-btn / \"/\")]\n      [:tr\n       (for [d (range 4 7)] (number-btn d))\n       (operator-btn - \"-\")]\n      [:tr\n       (for [d (range 7 10)] (number-btn d))\n       (operator-btn + \"+\")]\n      [:tr\n       [:td [:input {:type \"button\" :value \".\" \n                     :on-click #(swap! precision (fn [x] (if (> x 0) x 1)))}]]\n       (number-btn 0)\n       [:td [:input {:type \"button\" :value \"=\" :on-click evaluate}]]\n       (operator-btn * \"*\")]\n      [:tr [:input {:type \"button\" :value \"MEM\" :on-click (memory-handler :mem1)}]]\n      ]]\n   [:ul\n    [:li 1]\n    [:li 2]]\n   ]\n  )\n\n(defn ^:export run []\n      (rdom/render [calc-app] (js/document.getElementById \"app\")))\n\n(defn ^:export reload []\n      (.log js/console \"reload...\")\n      (run))\n"]}