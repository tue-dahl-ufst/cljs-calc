{"version":3,"sources":["my_project/app.cljs"],"mappings":"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","names":["my-project.app/screen","reagent.core.atom","my-project.app/memory","my-project.app/opt","my-project.app/precision","my-project.app/memory-precision","my-project.app/clear","cljs.core/reset!","my-project.app/evaluate","G__28697","cljs.core/deref","G__28698","fexpr__28696","x__4214__auto__","y__4215__auto__","my-project.app/operator-handler","opt-arg","cljs.core._EQ_","G__28700","G__28701","fexpr__28699","cljs.core.swap_BANG_","cljs.core.partial","cljs.core/max","my-project.app/number-handler","d","x","Math/pow","cljs.core/inc","my-project.app/operator-btn","opt-symbol","my-project.app/number-btn","my-project.app/calc-app","iter__4529__auto__","s__28703","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28705","cljs.core/chunk-buffer","i__28704","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28702","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","cljs.core//","s__28707","b__28709","i__28708","iter__28706","cljs.core/-","s__28711","b__28713","i__28712","iter__28710","cljs.core/+","cljs.core/*","my-project.app/run","reagent.dom.render","js/document.getElementById","my-project.app/reload","js/console","cljs.core/chunk-first"],"sourcesContent":["(ns my-project.app\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]))\n\n(def screen (r/atom 0))\n(def memory (r/atom nil))\n(def opt (r/atom nil))\n(def precision (r/atom 0))\n(def memory-precision (r/atom 0))\n\n(defn clear []\n  (reset! screen 0)\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! precision 0)\n  (reset! memory-precision 0))\n\n(defn evaluate []\n  (reset! screen (@opt @memory @screen))\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! precision (max @precision @memory-precision))\n  (reset! memory-precision 0))\n\n(defn operator-handler [opt-arg]\n  \"Returns a function that handles input operator $opt-arg.\"\n  (fn []\n    (cond (= @opt nil) (reset! opt opt-arg)\n          (= @memory nil) nil\n          :else (do (reset! screen (@opt @memory @screen))\n                    (swap! precision (partial max @memory-precision))\n                    (reset! memory nil)\n                    (reset! opt opt-arg)))))\n\n(defn number-handler [d]\n  \"Returns a function that handles input number $d.\"\n  (fn []\n    (cond (and (= @memory nil) @opt) (do (reset! memory @screen)\n                                         (reset! memory-precision @precision)\n                                         (reset! screen d)\n                                         (reset! precision 0))\n          ;; (and (= @memory nil) (= @opt nil)) (do (reset! screen d)\n          ;;                                        (reset! precision 0)\n          ;;                                        (if (> @precision 0)\n          ;;                                          (do (swap! screen (fn [x] (+ x (/ d (Math/pow 10 @precision)))))\n          ;;                                              (swap! precision inc))\n          ;;                                          (swap! screen (fn [x] (+ (* 10 x) d)))))\n          :else (if (> @precision 0)\n                  (do (swap! screen (fn [x] (+ x (/ d (Math/pow 10 @precision)))))\n                      (swap! precision inc))\n                  (swap! screen (fn [x] (+ (* 10 x) d)))))))\n\n(defn operator-btn [opt-arg opt-symbol]\n  [:td [:input\n        {:type \"button\" :value opt-symbol :on-click (operator-handler opt-arg)}]])\n(defn number-btn [d]\n  [:td [:input \n        {:type \"button\" :value d :on-click (number-handler d)}]])\n\n(defn calc-app []\n  [:table {:border \"1\"}\n   [:tbody\n    [:tr\n     [:td {:colspan \"3\"} [:input#result {:readonly \"\" :type \"text\" \n                                         :value (.toFixed @screen (max 0 (dec @precision)))}]]\n     [:td [:input {:type \"button\" :value \"c\" :on-click clear}]]]\n    [:tr\n     (for [d (range 1 4)] (number-btn d))\n     (operator-btn / \"/\")]\n    [:tr\n     (for [d (range 4 7)] (number-btn d))\n     (operator-btn - \"-\")]\n    [:tr\n     (for [d (range 7 10)] (number-btn d))\n     (operator-btn + \"+\")]\n    [:tr\n     [:td [:input {:type \"button\" :value \".\" \n                   :on-click #(swap! precision (fn [x] (if (> x 0) x 1)))}]]\n     (number-btn 0)\n     [:td [:input {:type \"button\" :value \"=\" :on-click evaluate}]]\n     (operator-btn * \"*\")]]]\n  )\n\n(defn ^:export run []\n      (rdom/render [calc-app] (js/document.getElementById \"app\")))\n\n(defn ^:export reload []\n      (.log js/console \"reload...\")\n      (run))\n"]}