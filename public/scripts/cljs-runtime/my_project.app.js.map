{"version":3,"sources":["my_project/app.cljs"],"mappings":"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","names":["my-project.app/screen","reagent.core.atom","my-project.app/memory","my-project.app/opt","my-project.app/precision","my-project.app/memory-precision","my-project.app/memories","my-project.app/new-number?","my-project.app/history","cljs.core//","my-project.app/opt-to-symbol","cljs.core/+","cljs.core/-","cljs.core/*","my-project.app/clear","cljs.core/reset!","my-project.app/evaluate","result","G__30198","cljs.core/deref","G__30199","fexpr__30197","p1__30196#","cljs.core.swap_BANG_","cljs.core.conj","x__4214__auto__","y__4215__auto__","G__30201","cljs.core.partial","cljs.core/max","my-project.app/operator-handler","opt-arg","cljs.core/not","cljs.core._EQ_","G__30204","G__30205","fexpr__30203","p1__30202#","G__30207","my-project.app/number-handler","d","x","Math/pow","cljs.core/inc","my-project.app/memory-handler","key","fexpr__30209","p1__30208#","cljs.core.assoc","fexpr__30210","my-project.app/operator-btn","opt-symbol","my-project.app/number-btn","my-project.app/calc-app","iter__4529__auto__","s__30212","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__30214","cljs.core/chunk-buffer","i__30213","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30211","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","s__30216","b__30218","i__30217","iter__30215","s__30220","b__30222","i__30221","iter__30219","s__30224","b__30226","i__30225","iter__30223","string","my-project.app/run","reagent.dom.render","js/document.getElementById","my-project.app/reload","js/console","cljs.core/chunk-first"],"sourcesContent":["(ns my-project.app\n  (:require\n    [reagent.core :as r]\n    [reagent.dom :as rdom]))\n\n(def screen (r/atom 0))\n(def memory (r/atom nil))\n(def opt (r/atom nil))\n(def precision (r/atom 0))\n(def memory-precision (r/atom 0))\n(def memories (r/atom {}))\n(def new-number? (r/atom true))\n(def history (r/atom []))\n(def opt-to-symbol\n  {/ \"/\", + \"+\", - \"-\", * \"*\"})\n\n(defn clear []\n  (reset! screen 0)\n  (reset! memory nil)\n  (reset! opt nil)\n  (reset! precision 0)\n  (reset! memory-precision 0)\n  (reset! new-number? true))\n\n(defn evaluate []\n  (let [result (@opt @memory @screen)]\n    (swap! history \n           #(conj % (str (.toFixed @memory (max 0 (dec @memory-precision))) \" \" \n                         (opt-to-symbol @opt) \" \" \n                         (.toFixed @screen (max 0 (dec @precision))) \" = \" \n                         (.toFixed result (max 0 (dec @memory-precision)\n                                               (dec @precision))))))\n    (reset! screen result)\n    (swap! precision (partial max @memory-precision))\n    (reset! memory nil)\n    (reset! memory-precision 0)\n    (reset! opt nil)\n    (reset! new-number? true)))\n\n(defn operator-handler [opt-arg]\n  \"Returns a function that handles input operator $opt-arg.\"\n  (fn []\n    (when (not @new-number?) ;; does nothing if we expect new number\n      (when (not (= @opt nil)) ;; if there is a pending operation, do it\n        (let [result (@opt @memory @screen)]\n          (swap! history \n                 #(conj % (str (.toFixed @memory (max 0 (dec @memory-precision))) \" \" \n                               (opt-to-symbol @opt) \" \" \n                               (.toFixed @screen (max 0 (dec @precision))) \" = \" \n                               (.toFixed result (max 0 (dec @memory-precision)\n                                                     (dec @precision))))))\n          (reset! screen result)\n          (swap! precision (partial max @memory-precision))\n          (reset! memory nil)\n          (reset! memory-precision 0)))\n      (reset! opt opt-arg) ;; no matter what record new operation\n      (reset! new-number? true)))) ;; expect a number after this\n(defn number-handler [d]\n  \"Returns a function that handles input number $d.\"\n  (fn []\n    (if @new-number? ;; either we expect a new number\n      (do (reset! memory @screen)\n          (reset! memory-precision @precision)\n          (reset! screen d)\n          (reset! precision 0)\n          (reset! new-number? false))\n      (if (> @precision 0) ;; or we build on what is already there\n        (do (swap! screen (fn [x] (+ x (/ d (Math/pow 10 @precision)))))\n            (swap! precision inc))\n        (swap! screen (fn [x] (+ (* 10 x) d)))))))\n(defn memory-handler [key]\n  \"Returns a function that handles saving and recalling from register $key.\"\n  (fn []\n    (if (= (@memories key) nil)\n      (swap! memories #(assoc % key @screen))\n      (reset! screen (@memories key)))))\n\n(defn operator-btn [opt-arg opt-symbol]\n  [:td [:input\n        {:type \"button\" :value opt-symbol :on-click (operator-handler opt-arg)}]])\n(defn number-btn [d]\n  [:td [:input \n        {:type \"button\" :value d :on-click (number-handler d)}]])\n\n(defn calc-app []\n  [:html\n   [:table {:border \"1\"}\n     [:tbody\n      [:tr\n       [:td {:colspan \"3\"} [:input#result {:readonly \"\" :type \"text\"\n                                           :value (.toFixed @screen (max 0 (dec @precision)))}]]\n       [:td [:input {:type \"button\" :value \"c\" :on-click clear}]]]\n      [:tr\n       (for [d (range 1 4)] (number-btn d))\n       (operator-btn / \"/\")]\n      [:tr\n       (for [d (range 4 7)] (number-btn d))\n       (operator-btn - \"-\")]\n      [:tr\n       (for [d (range 7 10)] (number-btn d))\n       (operator-btn + \"+\")]\n      [:tr\n       [:td [:input {:type \"button\" :value \".\" \n                     :on-click #(swap! precision (fn [x] (if (> x 0) x 1)))}]]\n       (number-btn 0)\n       [:td [:input {:type \"button\" :value \"=\" :on-click evaluate}]]\n       (operator-btn * \"*\")]\n      [:tr [:input {:type \"button\" :value \"MEM\" :on-click (memory-handler :mem1)}]]\n      ]]\n   [:ul\n    (for [string @history]\n      [:li string])]\n   ]\n  )\n\n(defn ^:export run []\n      (rdom/render [calc-app] (js/document.getElementById \"app\")))\n\n(defn ^:export reload []\n      (.log js/console \"reload...\")\n      (run))\n"]}